{
    "meta": {
        "language": "cpp",
        "language_version": "C++17",
        "language_name": "C++",
        "structure": "queue and stacks"
      },
      "concepts":{
            "Inbuild_Header_file_for_queue":{
               "code":"#include<queue>",
                "name":"For implement queue container in our cpp file iclude this header file"
            },
            "Syntax_for_queue":{
                "code":"queue<objectType> queue_name",
                 "name":"The general syntax for declaration of the queue"
             },
             "Push_operation_in_queue":{
                "code":"queue_name.push(element)",
                 "name":" Function push adds the element at the end of the queue i.e. at the back of the queue"
             },
             "Pop_operation_in_queue":{
                "code":"queue_name.pop(element)",
                 "name":"Function ‘pop’ removes the first element of the queue i.e. the element at the front of the queue"
             },
             "front_function_in_queue":{
                "code":"queue_name.front()",
                 "name":"This function returns a reference to the first element of the queue"
             },
             "back_function_in_queue":{
                "code":"queue_name.back()",
                 "name":"Back returns a reference to the last element in the queue"
             },
             "empty_function_in_queue":{
                "code":"queue_name.empty()",
                 "name":"Checks if the queue is empty"
             },
             "size_function_in_queue":{
                "code":"queue_name.size()",
                 "name":"Returns the size of the queue i.e. the number of elements in the queue"
             },
             "Inbuild_Header_file_for_stacks":{
                "code":"#include<stack>",
                 "name":"In order to implement stack container, we need to include the header <stack> in our program"
             },
             "Syntax_for_stack":{
                 "code":"stack<objectType> stack_name",
                  "name":"The general syntax for declaration of the queue"
              },
              "Push_operation_in_stack":{
                 "code":"stack_name.push(element)",
                  "name":"  push operation is used to insert an element in the stack. This operation always adds elements at the top of the stack"
              },
              "Pop_operation_in_stack":{
                 "code":"stack_name.pop(element)",
                 "comment":"As a result of the pop operation, the stack size is reduced by 1",
                  "name":"pop operation is used to remove an element from the stack. The element removed is the one that is pointed to by the top of the stack"
              },
              "top_function_in_stack":{
                 "code":"stack_name.top()",
                  "name":"Returns the topmost element of the stack"
              },
              "empty_function_in_stack":{
                 "code":"stack_name.empty()",
                  "name":" Returns the size of the stack i.e. the number of elements in the stack"
              },
              "size_function_in_stack":{
                 "code":"queue_name.size()",
                  "name":"Returns the size of the queue i.e. the number of elements in the queue"
              }
      }
}
